<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <title>Gestion de demande - Employé</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/user.css">
    <link rel="stylesheet" href="/css/navigationuser.css">
    <style>
        .pagination {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
        }

        .pagination-info {
            margin: 0;
            padding: 0 10px;
        }

        .pagination .page-item {
            margin: 0 2px;
        }

        .pagination .page-item.active .page-link {
            background-color: #007bff;
            border-color: #007bff;
        }

        .pagination .page-item.disabled .page-link {
            color: #6c757d;
            pointer-events: none;
            background-color: #fff;
            border-color: #dee2e6;
        }
    </style>
</head>

<body>
    <!-- Inclure la barre de navigation -->
    <%- include('../navbar') %>

    <div class="main-content">
        <section class="solde-section">
  <div class="solde-section-header">
    <h3>Gestion demande</h3>
    <button id="toggleSolde" class="toggle-btn">
      <i id="toggleIcon" class="fas fa-chevron-up"></i>
    </button>
  </div>
  <div class="solde-cards" id="soldeContent">
    <div class="solde-card">
      <div class="solde-card-content">
        <div class="solde-card-icon">
          <i class="fas fa-calendar-check"></i>
        </div>
        <div class="solde-card-value">
          <%= (parseFloat(soldeConge) % 1 === 0 ? parseFloat(soldeConge).toFixed(0) : parseFloat(soldeConge).toFixed(1)) %>
        </div>
        <div class="solde-card-label">Jours de congés payés</div>
      </div>
    </div>
    <div class="solde-card solde-card-secondary">
      <div class="solde-card-content">
        <div class="solde-card-icon">
          <i class="fas fa-history"></i>
        </div>
        <div class="solde-card-value">
          <%= demandes.length > 0 ? new Date(demandes[0].date_demande).toLocaleDateString('fr-FR', { day: 'numeric', month: 'short' }) : "Aucune" %>
        </div>
        <div class="solde-card-label">Dernière demande</div>
      </div>
    </div>
  </div>
</section>


        <section class="actions">
            <button id="btnOuvrirModal" class="btn btn-primary"><i class='bx bx-plus'></i> Faire une demande</button>
        </section>

        <!-- Barre de filtres moderne -->
        <section class="filters bg-white p-3 rounded shadow-sm mb-4">
            <div class="row g-3 align-items-end">
                <!-- Type de congé -->
                <div class="col-md-3">
                    <label for="filterType" class="form-label">Type</label>
                    <select id="filterType" class="form-select">
                        <option value="">Tous</option>
                        <% typesConges.forEach(type => { %>
                          <option value="<%= type.nom_type_conge %>"><%= type.nom_type_conge %></option>
                        <% }); %>
                    </select>
                </div>
                <!-- Statut -->
                <div class="col-md-5">
                    <label class="form-label d-block mb-1">Statut</label>
                    <div class="btn-group filter-status-group w-100" role="group">
                        <button type="button" class="btn btn-outline-primary filter-btn active" data-status="all">Tous</button>
                        <button type="button" class="btn btn-outline-warning filter-btn" data-status="en attente">En attente</button>
                        <button type="button" class="btn btn-outline-success filter-btn" data-status="approuvé">Approuvé</button>
                        <button type="button" class="btn btn-outline-danger filter-btn" data-status="refusé">Refusé</button>
                    </div>
                </div>
                <!-- Période -->
                <div class="col-md-4">
                    <label class="form-label d-block">Période</label>
                    <div class="d-flex gap-2">
                        <input type="date" id="filterDateFrom" class="form-control filter-date" placeholder="Du">
                        <span class="align-self-center">-</span>
                        <input type="date" id="filterDateTo" class="form-control filter-date" placeholder="Au">
                    </div>
                </div>
            </div>
        </section>

        <section class="demandes">
            <h3>Mes demandes</h3>
            <table id="tableDemandes" class="table table-hover mb-0">
                <thead>
                    <tr>
                        <th>Référence</th>
                        <th>Type</th>
                        <th>Date début</th>
                        <th>Date fin</th>
                        <th>Durée</th>
                        <th>Statut</th>
                        <th>Date de demande</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="demandesTableBody">
                    <% if (demandes && demandes.length > 0) { %>
                    <% demandes.forEach(demande => {
                        let classDemande = '';
                        if (demande.statut === 'en attente') classDemande = 'pending';
                        else if (demande.statut === 'approuvé') classDemande = 'approved';
                        else if (demande.statut === 'refusé') classDemande = 'rejected';

                        const formatDate = (dateStr) => {
                            const options = { day: 'numeric', month: 'long', year: 'numeric' };
                            return new Date(dateStr).toLocaleDateString('fr-FR', options);
                        };
                    %>
                    <tr class="demand-item <%= classDemande %>"
                        data-type="<%= demande.type_conge %>"
                        data-status="<%= demande.statut.toLowerCase() %>"
                        data-date-debut="<%= new Date(demande.date_debut).toISOString().split('T')[0] %>"
                        data-date-fin="<%= new Date(demande.date_fin).toISOString().split('T')[0] %>">

                        <td><%= demande.reference %></td>
                        <td><%= demande.type_conge %></td>
                        <td><%= formatDate(demande.date_debut) %></td>
                        <td><%= formatDate(demande.date_fin) %></td>

                        <td>
                            <% if (demande.periode_journee === 'matin') { %>
                                Matin
                            <% } else if (demande.periode_journee === 'soir') { %>
                                Après-midi
                            <% } else { %>
                                <%= demande.duree %> jour<%= demande.duree > 1 ? 's' : '' %>
                            <% } %>
                        </td>

                        <td>
                            <% if (demande.statut === 'en attente') { %>
                                <span class="badge badge-pending rounded-pill px-3 py-2">En attente</span>
                            <% } else if (demande.statut === 'approuvé') { %>
                                <span class="badge badge-approved rounded-pill px-3 py-2">Approuvée</span>
                            <% } else if (demande.statut === 'refusé') { %>
                                <span class="badge badge-rejected rounded-pill px-3 py-2">Rejetée</span>
                            <% } %>
                        </td>

                        <td><%= formatDate(demande.date_demande) %></td>
                        <td class="action-buttons">
                            <button class="btn btn-sm btn-info btn-view" data-id="<%= demande.id %>">
                                <i class="fas fa-eye"></i>
                            </button>
                            <% if (demande.statut === 'en attente') { %>
                                <button class="btn btn-warning btn-sm" onclick='openModifierModal(<%= JSON.stringify(demande) %>)'>
                                    <i class='bx bx-edit'></i>
                                </button>
                                <button class="btn btn-danger btn-sm" onclick="annulerDemande(<%= demande.id %>)">
                                    <i class="bx bx-trash"></i>
                                </button>
                            <% } %>
                        </td>
                    </tr>
                    <% }); %>
                    <% } else { %>
                    <tr>
                        <td colspan="8" class="text-center">Aucune demande de congé trouvée</td>
                    </tr>
                    <% } %>
                </tbody>
            </table>
        </section>

        <!-- Pagination -->
        <div class="pagination">
            <div class="pagination-info" id="paginationInfo">
                Affichage de <strong>1-5</strong> sur <strong>5</strong> demandes
            </div>
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center" id="pagination">
                    <!-- Les éléments de pagination seront générés dynamiquement ici -->
                </ul>
            </nav>
        </div>
    </div>

    <!-- Modals -->
    <div id="modals-container"></div>

    <!-- Bootstrap JS (avec Popper) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- JavaScript -->
    <script src="/js/feedback.js"></script>
    <script>
        // Variables globales
        let currentPage = 1;
        const rowsPerPage = 2;
        let allDemandes = <%- JSON.stringify(demandes) %>;
        let typesConges = <%- JSON.stringify(typesConges) %>;

        // Fonction pour formater les dates
        function formatDate(dateStr) {
            const date = new Date(dateStr);
            const options = { day: 'numeric', month: 'long', year: 'numeric' };
            return date.toLocaleDateString('fr-FR', options);
        }

        // Fonction pour créer et afficher le modal de détails
        function createAndShowModal(demande) {
            const modalHtml = `
                <div class="modal fade" id="demandDetailsModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content border-primary shadow-lg">
                            <div class="modal-header bg-primary text-white">
                                <h5 class="modal-title">Détails de la demande</h5>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fermer"></button>
                            </div>
                            <div class="modal-body">
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item"><strong>Référence :</strong> ${demande.reference}</li>
                                    <li class="list-group-item"><strong>Type :</strong> ${demande.type_conge}</li>
                                    <li class="list-group-item"><strong>Début :</strong> ${formatDate(demande.date_debut)}</li>
                                    <li class="list-group-item"><strong>Fin :</strong> ${formatDate(demande.date_fin)}</li>
                                    <li class="list-group-item"><strong>Durée :</strong>
                                        ${demande.periode_journee === 'matin' ? 'Matin' :
                                         demande.periode_journee === 'soir' ? 'Après-midi' :
                                         `${demande.duree} jour${demande.duree > 1 ? 's' : ''}`}</li>
                                    <li class="list-group-item"><strong>Motif :</strong> ${demande.motif || 'Non précisé'}</li>
                                    <li class="list-group-item"><strong>Statut :</strong> ${getStatusBadge(demande.statut)}</li>
                                    <li class="list-group-item"><strong>Demandé le :</strong> ${formatDate(demande.date_demande)}</li>
                                </ul>
                            </div>
                            <div class="modal-footer bg-light">
                                <button class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            const modalContainer = document.createElement('div');
            modalContainer.innerHTML = modalHtml;
            document.getElementById('modals-container').appendChild(modalContainer);

            const modal = new bootstrap.Modal(modalContainer.querySelector('.modal'));
            modal.show();

            modalContainer.querySelector('.modal').addEventListener('hidden.bs.modal', () => {
                modalContainer.remove();
            });
        }

        function getStatusBadge(statut) {
            let badgeClass = '';
            if (statut === 'approuvé') badgeClass = 'bg-success text-white';
            else if (statut === 'refusé') badgeClass = 'bg-danger text-white';
            else badgeClass = 'bg-warning text-dark';
            return `<span class="badge ${badgeClass} p-2">${statut.toUpperCase()}</span>`;
        }

        // Fonction pour afficher les demandes en fonction de la page actuelle
        function displayDemandes() {
            const tableBody = document.getElementById('demandesTableBody');
            tableBody.innerHTML = '';

            const startIndex = (currentPage - 1) * rowsPerPage;
            const endIndex = startIndex + rowsPerPage;
            const filteredDemandes = filterDemandes(allDemandes);
            const paginatedDemandes = filteredDemandes.slice(startIndex, endIndex);

            if (paginatedDemandes.length > 0) {
                paginatedDemandes.forEach(demande => {
                    const row = document.createElement('tr');
                    let classDemande = '';
                    if (demande.statut === 'en attente') classDemande = 'pending';
                    else if (demande.statut === 'approuvé') classDemande = 'approved';
                    else if (demande.statut === 'refusé') classDemande = 'rejected';

                    row.className = `demand-item ${classDemande}`;
                    row.setAttribute('data-type', demande.type_conge);
                    row.setAttribute('data-status', demande.statut.toLowerCase());
                    row.setAttribute('data-date-debut', new Date(demande.date_debut).toISOString().split('T')[0]);
                    row.setAttribute('data-date-fin', new Date(demande.date_fin).toISOString().split('T')[0]);

                    row.innerHTML = `
                        <td>${demande.reference}</td>
                        <td>${demande.type_conge}</td>
                        <td>${formatDate(demande.date_debut)}</td>
                        <td>${formatDate(demande.date_fin)}</td>
                        <td>
                            ${demande.periode_journee === 'matin' ? 'Matin' :
                             demande.periode_journee === 'soir' ? 'Après-midi' :
                             `${demande.duree} jour${demande.duree > 1 ? 's' : ''}`}
                        </td>
                        <td>
                            ${demande.statut === 'en attente' ? '<span class="badge badge-pending rounded-pill px-3 py-2">En attente</span>' :
                             demande.statut === 'approuvé' ? '<span class="badge badge-approved rounded-pill px-3 py-2">Approuvée</span>' :
                             '<span class="badge badge-rejected rounded-pill px-3 py-2">Rejetée</span>'}
                        </td>
                        <td>${formatDate(demande.date_demande)}</td>
                        <td class="action-buttons">
                            <button class="btn btn-sm btn-info btn-view" data-id="${demande.id}">
                                <i class="fas fa-eye"></i>
                            </button>
                            ${demande.statut === 'en attente' ?
                                `<button class="btn btn-warning btn-sm" onclick='openModifierModal(${JSON.stringify(demande)})'>
                                    <i class='bx bx-edit'></i>
                                </button>
                                <button class="btn btn-danger btn-sm" onclick="annulerDemande(${demande.id})">
                                    <i class="bx bx-trash"></i>
                                </button>` : ''}
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } else {
                const row = document.createElement('tr');
                row.innerHTML = '<td colspan="8" class="text-center">Aucune demande de congé trouvée</td>';
                tableBody.appendChild(row);
            }

            // Mettre à jour la pagination
            updatePagination(filteredDemandes.length);
        }

        // Fonction pour filtrer les demandes
        function filterDemandes(demandes) {
            const filterType = document.getElementById("filterType").value;
            const statusVal = document.querySelector(".filter-btn.active").dataset.status;
            const dateFromInput = document.getElementById("filterDateFrom").value;
            const dateToInput = document.getElementById("filterDateTo").value;

            return demandes.filter(demande => {
                // Filtre par type
                if (filterType && demande.type_conge !== filterType) {
                    return false;
                }

                // Filtre par statut
                if (statusVal !== "all" && demande.statut.toLowerCase() !== statusVal) {
                    return false;
                }

                // Filtre par période de congé
                const dateDebut = new Date(demande.date_debut);
                const dateFin = new Date(demande.date_fin);

                if (dateFromInput) {
                    const dateFrom = new Date(dateFromInput);
                    if (dateDebut < dateFrom) {
                        return false;
                    }
                }

                if (dateToInput) {
                    const dateTo = new Date(dateToInput);
                    if (dateFin > dateTo) {
                        return false;
                    }
                }

                return true;
            });
        }

        // Fonction pour mettre à jour la pagination
        function updatePagination(totalItems) {
            const totalPages = Math.ceil(totalItems / rowsPerPage);
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            // Bouton Précédent
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" tabindex="-1">Précédent</a>`;
            prevLi.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    displayDemandes();
                }
            });
            pagination.appendChild(prevLi);

            // Boutons de page
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            if (startPage > 1) {
                const firstPageLi = document.createElement('li');
                firstPageLi.className = 'page-item';
                firstPageLi.innerHTML = `<a class="page-link" href="#">1</a>`;
                firstPageLi.addEventListener('click', (e) => {
                    e.preventDefault();
                    currentPage = 1;
                    displayDemandes();
                });
                pagination.appendChild(firstPageLi);

                if (startPage > 2) {
                    const ellipsisLi = document.createElement('li');
                    ellipsisLi.className = 'page-item disabled';
                    ellipsisLi.innerHTML = `<span class="page-link">...</span>`;
                    pagination.appendChild(ellipsisLi);
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${currentPage === i ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                pageLi.addEventListener('click', (e) => {
                    e.preventDefault();
                    currentPage = i;
                    displayDemandes();
                });
                pagination.appendChild(pageLi);
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    const ellipsisLi = document.createElement('li');
                    ellipsisLi.className = 'page-item disabled';
                    ellipsisLi.innerHTML = `<span class="page-link">...</span>`;
                    pagination.appendChild(ellipsisLi);
                }

                const lastPageLi = document.createElement('li');
                lastPageLi.className = 'page-item';
                lastPageLi.innerHTML = `<a class="page-link" href="#">${totalPages}</a>`;
                lastPageLi.addEventListener('click', (e) => {
                    e.preventDefault();
                    currentPage = totalPages;
                    displayDemandes();
                });
                pagination.appendChild(lastPageLi);
            }

            // Bouton Suivant
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#">Suivant</a>`;
            nextLi.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage < totalPages) {
                    currentPage++;
                    displayDemandes();
                }
            });
            pagination.appendChild(nextLi);

            // Mettre à jour l'information de pagination
            const startIndex = (currentPage - 1) * rowsPerPage + 1;
            const endIndex = Math.min(currentPage * rowsPerPage, totalItems);
            document.getElementById('paginationInfo').innerHTML =
                `Affichage de <strong>${startIndex}-${endIndex}</strong> sur <strong>${totalItems}</strong> demandes`;
        }

        // Fonction pour recharger les données
        async function reloadDemandes() {
            try {
                const response = await fetch('/navigationuser/consultedemande/page');

                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }

                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    throw new Error("La réponse n'est pas du JSON valide");
                }

                const result = await response.json();
                if (result.success) {
                    allDemandes = result.demandes;
                    currentPage = 1; // Réinitialiser à la première page
                    displayDemandes();
                } else {
                    throw new Error(result.message || "Erreur lors du chargement des demandes");
                }
            } catch (error) {
                console.error('Erreur lors du rechargement des demandes:', error);
                showFeedbackModal({
                    type: 'error',
                    title: 'Erreur',
                    message: 'Erreur lors du rechargement des demandes: ' + error.message
                });
            }
        }

        // Fonction pour annuler une demande
        window.annulerDemande = function(demandeId) {
            showConfirmationModal({
                title: 'Confirmation',
                message: 'Êtes-vous sûr de vouloir annuler cette demande ?',
                confirmText: 'Annuler la demande',
                onConfirm: async () => {
                    try {
                        const response = await fetch(`/navigationuser/demande/${demandeId}`, {
                            method: 'DELETE'
                        });

                        if (response.ok) {
                            await reloadDemandes();
                            showFeedbackModal({
                                type: 'success',
                                title: 'Succès',
                                message: 'Demande annulée avec succès !'
                            });
                        } else {
                            const errorData = await response.json();
                            showFeedbackModal({
                                type: 'error',
                                title: 'Erreur',
                                message: 'Erreur : ' + (errorData.message || 'Erreur inconnue')
                            });
                        }
                    } catch (error) {
                        console.error('Erreur:', error);
                        showFeedbackModal({
                            type: 'error',
                            title: 'Erreur',
                            message: 'Erreur réseau lors de l\'annulation de la demande.'
                        });
                    }
                }
            });
        };

        // Fonction pour ouvrir le modal de modification
        window.openModifierModal = async function(demande) {
            // Créer le modal de modification
            const modalHtml = `
                <div class="modal fade" id="modalModifier" tabindex="-1" aria-labelledby="modalModifierLabel" aria-hidden="true">
                    <div class="modal-dialog modal-xl">
                        <form id="formModifier" class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="modalModifierLabel">Modifier la demande de congé</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="type_conge_modifier" class="form-label">Type de congé :</label>
                                        <select class="form-select" id="type_conge_modifier" name="type_conge" required>
                                            ${typesConges.map(type => `
                                                <option value="${type.id_type_conge}" ${demande.type_conge === type.nom_type_conge ? 'selected' : ''}>
                                                    ${type.nom_type_conge}
                                                </option>
                                            `).join('')}
                                        </select>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="periode_journee_modifier" class="form-label">Période de la journée :</label>
                                        <select class="form-select" id="periode_journee_modifier" name="periode_journee">
                                            <option value="" ${!demande.periode_journee ? 'selected' : ''}>Journée entière</option>
                                            <option value="matin" ${demande.periode_journee === 'matin' ? 'selected' : ''}>Matin</option>
                                            <option value="soir" ${demande.periode_journee === 'soir' ? 'selected' : ''}>Après-midi</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="date_debut_modifier" class="form-label">Date de début :</label>
                                        <input type="date" class="form-control" id="date_debut_modifier" name="date_debut"
                                               value="${new Date(demande.date_debut).toISOString().split('T')[0]}" required>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="date_fin_modifier" class="form-label">Date de fin :</label>
                                        <input type="date" class="form-control" id="date_fin_modifier" name="date_fin"
                                               value="${new Date(demande.date_fin).toISOString().split('T')[0]}" required>
                                    </div>
                                    <div class="col-12 mb-3">
                                        <label for="motif_modifier" class="form-label">Motif :</label>
                                        <textarea class="form-control" id="motif_modifier" name="motif" rows="3" required>${demande.motif || ''}</textarea>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                                <button type="submit" class="btn btn-primary">Modifier la demande</button>
                            </div>
                        </form>
                    </div>
                </div>
            `;

            const modalContainer = document.createElement('div');
            modalContainer.innerHTML = modalHtml;
            document.getElementById('modals-container').appendChild(modalContainer);

            const modal = new bootstrap.Modal(modalContainer.querySelector('.modal'));
            modal.show();

            const formModifier = document.getElementById('formModifier');
            formModifier.addEventListener('submit', async (event) => {
                event.preventDefault();

                const formData = new FormData(formModifier);
                const data = Object.fromEntries(formData.entries());

                try {
                    const response = await fetch(`/navigationuser/modifier/${demande.id}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        await reloadDemandes();
                        showFeedbackModal({
                            type: 'success',
                            title: 'Succès',
                            message: 'Demande modifiée avec succès !'
                        });
                        modal.hide();
                    } else {
                        const errorData = await response.json();
                        showFeedbackModal({
                            type: 'error',
                            title: 'Erreur',
                            message: 'Erreur lors de la modification de la demande : ' + (errorData.message || 'Erreur inconnue')
                        });
                    }
                } catch (error) {
                    console.error('Erreur:', error);
                    showFeedbackModal({
                        type: 'error',
                        title: 'Erreur',
                        message: 'Erreur réseau lors de la modification de la demande.'
                    });
                }
            });

            modalContainer.querySelector('.modal').addEventListener('hidden.bs.modal', () => {
                modalContainer.remove();
            });
        };

        // Fonction pour ouvrir le modal de nouvelle demande
        window.openNouvelleDemandeModal = function() {
            const modalHtml = `
                <div class="modal fade" id="modalDemande" tabindex="-1" aria-labelledby="modalDemandeLabel" aria-hidden="true">
                    <div class="modal-dialog modal-xl">
                        <form id="formDemande" class="modal-content" enctype="multipart/form-data">
                            <div class="modal-header">
                                <h5 class="modal-title" id="modalDemandeLabel">Faire une demande de congé</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="type_conge" class="form-label">Type de congé :</label>
                                        <select class="form-select" id="type_conge" name="type_conge" required>
                                            ${typesConges.map(type => `
                                                <option value="${type.id_type_conge}">${type.nom_type_conge}</option>
                                            `).join('')}
                                        </select>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="periode_journee" class="form-label">Période de la journée :</label>
                                        <select class="form-select" id="periode_journee" name="periode_journee">
                                            <option value="" selected>Journée entière</option>
                                            <option value="matin">Matin</option>
                                            <option value="soir">Après-midi</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="date_debut" class="form-label">Date de début :</label>
                                        <input type="date" class="form-control" id="date_debut" name="date_debut" required>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="date_fin" class="form-label">Date de fin :</label>
                                        <input type="date" class="form-control" id="date_fin" name="date_fin" required>
                                    </div>
                                    <div class="col-12 mb-3">
                                        <label for="motif" class="form-label">Motif :</label>
                                        <textarea class="form-control" id="motif" name="motif" rows="3" required></textarea>
                                    </div>
                                    <div class="col-12 mb-3">
                                        <label for="piece_jointe" class="form-label">Pièce jointe :</label>
                                        <input type="file" class="form-control" id="piece_jointe" name="piece_jointe">
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                                <button type="submit" class="btn btn-primary">Envoyer la demande</button>
                            </div>
                        </form>
                    </div>
                </div>
            `;

            const modalContainer = document.createElement('div');
            modalContainer.innerHTML = modalHtml;
            document.getElementById('modals-container').appendChild(modalContainer);

            const modal = new bootstrap.Modal(modalContainer.querySelector('.modal'));
            modal.show();

            const formDemande = document.getElementById('formDemande');
            formDemande.addEventListener('submit', async (event) => {
                event.preventDefault();

                const formData = new FormData(formDemande);

                try {
                    const response = await fetch('/navigationuser/demande', {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        await reloadDemandes();
                        showFeedbackModal({
                            type: 'success',
                            title: 'Succès',
                            message: 'Demande envoyée avec succès !'
                        });
                        modal.hide();
                    } else {
                        const errorData = await response.json();
                        showFeedbackModal({
                            type: 'error',
                            title: 'Erreur',
                            message: 'Erreur lors de l\'envoi de la demande : ' + (errorData.message || 'Erreur inconnue')
                        });
                    }
                } catch (error) {
                    console.error('Erreur:', error);
                    showFeedbackModal({
                        type: 'error',
                        title: 'Erreur',
                        message: 'Erreur réseau lors de l\'envoi de la demande.'
                    });
                }
            });

            modalContainer.querySelector('.modal').addEventListener('hidden.bs.modal', () => {
                modalContainer.remove();
            });
        };

        // Initialisation au chargement de la page
        document.addEventListener("DOMContentLoaded", function() {
            // Initialiser les écouteurs d'événements
            document.getElementById('btnOuvrirModal').addEventListener('click', openNouvelleDemandeModal);

            document.addEventListener('click', (e) => {
                if (e.target.closest('.btn-view')) {
                    const id = e.target.closest('.btn-view').dataset.id;
                    const demande = allDemandes.find(d => d.id == id);
                    if (demande) createAndShowModal(demande);
                }
            });

            // Écouteurs pour les filtres
            document.getElementById("filterType").addEventListener("change", () => {
                currentPage = 1;
                displayDemandes();
            });

            document.querySelectorAll(".filter-btn").forEach(btn => {
                btn.addEventListener("click", function() {
                    document.querySelectorAll(".filter-btn").forEach(b => b.classList.remove("active"));
                    this.classList.add("active");
                    currentPage = 1;
                    displayDemandes();
                });
            });

            document.getElementById("filterDateFrom").addEventListener("change", () => {
                currentPage = 1;
                displayDemandes();
            });

            document.getElementById("filterDateTo").addEventListener("change", () => {
                currentPage = 1;
                displayDemandes();
            });

            // Afficher les demandes initiales
            displayDemandes();
        });
    </script>

    <script src="/js/reduire.js"></script>
    <script src="/js/effet.js"></script>
    <script src="/js/animationnav.js"></script>
    <script src="/js/baractivation.js"></script>
</body>
</html>
